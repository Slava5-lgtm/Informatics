                                            Операция NOT (отрицание)

Есть операция NOT — отрицание. Здесь всё довольно просто. Если у нас есть какая-то фраза, которая у нас
является ложью (false). Например: «Солнце восходит на западе». То применяя операцию NOT, мы можем сказать,
что солнце не восходит на западе. Таким образом у нас инвертируется значение самого выражения, то есть,
меняется на противоположное. Вместо false становится true.

У нас есть таблица истинности, где на input подаётся фраза, а на output мы ожидаем обратную фразу, той,
которая у нас подалась. То есть, если на input нам подаётся правдивая фраза — это true. На output, на
выходе после применения этой операции, мы должны ожидать false — ложную фразу. И наоборот, если мы подаём
false, то потом, после применения этой операции, должно быть true.

            Солнце восходит на западе       FALSE 
            Солнце НЕ восходит на западе    TRUE

                        INPUT    OUTPUT 
                        TRUE     FALSE
                        FALSE    TRUE

Как NOT реализовать на транзисторах? Всё довольно просто. Нам надо придумать и подсоединить дополнительный
провод со стороны подачи напряжения на транзистор, который мы назовём output. А input у нас будет значение,
которое мы подаём на наш полупроводник. Если мы подаём напряжение, то есть, у нас появляется 1 (true), у
нас транзистор превращается в проводник, и ток начинает течь вниз, в сторону земли, тем самым, уводя
напряжение. А на output у нас появляется сброс напряжения и там практически нет тока. То есть, появляется
отсутствие тока или 0 (false). Если мы, наоборот, уберём напряжение с нашего input, а транзистор
превращается в dielectric, то всё напряжение пойдёт через отводящий провод, то есть через output.

Представьте, что у вас дома есть кран. Вы открываете воду, вода течёт, давление есть — всё хорошо, но как
только снизу мы подключим более широкую трубу, туда уйдёт всё давление и вся вода, тогда у вас из крана
потечёт тоненькая струйка, а может и вообще ничего не потечёт, если труба будет слишком большая.


                                        Операция AND (логическая и) 
Здесь тоже всё довольно просто. Эта операция принимает на вход уже два выражения (значения). Здесь будет
два input, и каждое значение может быть ложным или истинным, поэтому у нас четыре варианта. Сама операция
AND возвращает истину только в том случае, когда у нас оба выражения истины, а когда у нас хотя бы одна
часть выражения ложна, она как бы заражает ложью всё выражение и в остальных случаях у нас false.

Солнце восходит на западе И Эверест самая высокая гора в мире        FALSE
Солнце восходит на западе И Эльбурус самая высокая гора в мире       FALSE
Солнце восходит на востоке И Эльбурус самая высокая гора в мире      FALSE
Солнце восходит на востоке И Эверест самая высокая гора в мире       TRUE

                        INPUT   INPUT2  OUTPUT
                        FALSE   FALSE   FALSE
                        TRUE    FALSE   FALSE
                        FALSE   TRUE    FALSE
                        TRUE    TRUE    TRUE


Как её реализовать с помощью транзистора? Мы берём два транзистора и соединяем последовательно. При этом у
нас получается два input. Каждый падает на определённый транзистор. Input на транзистор A и input на
транзистор B. Если мы не будем подавать электричество на input на транзистор A, у нас ток не потечёт.
Поэтому не важно, что будет на транзисторе B (будет ток или нет), транзистор A не даст тока. Но как только
мы дадим ток на транзистор A, он потечёт на транзистор B и будет уже зависеть от состояния провода. Лишь в
одном случае, когда у нас на два input подаётся напряжение, подаётся 1 (true), только тогда у нас на
output тоже будет напряжение (true).

                                        Операция OR (логическая или)

OR действует немного по-другому. Нам предлагают выбор из двух частей нашего выражения. Если у нас хотя бы
в одной части есть истина, тогда она заражает истинной всё выражение целиком. У нас есть выбор, мы можем
выбрать истину. Поэтому там, где в выражениях будет правда, хотя бы одна, у нас будет возвращаться true.
И только в том выражении, где у нас оба выражения лживы, мы можем ответить false, что это выражение будет
ложным. Как видите, у нас здесь true присутствует там, где есть true хотя бы на одном input

Солнце восходит на западе И Эверест самая высокая гора в мире        TRUE
Солнце восходит на западе И Эльбурус самая высокая гора в мире       FALSE
Солнце восходит на востоке И Эльбурус самая высокая гора в мире      TRUE
Солнце восходит на востоке И Эверест самая высокая гора в мире       TRUE

                        INPUT   INPUT2  OUTPUT
                        FALSE   FALSE   FALSE
                        TRUE    FALSE   TRUE
                        FALSE   TRUE    TRUE
                        TRUE    TRUE    TRUE  

Как это реализовать с помощью транзисторов? Нам надо подключить их просто параллельным подключением. То
есть у нас есть транзистор сверху, транзистор снизу. Напряжение подаётся сразу одновременно на оба этих
транзистора. И как только у нас есть true хотя бы на одном из input, у нас на output будет напряжение.
При этом, если мы одновременно подадим напряжение (1) на наши транзисторы, ток всё равно потечёт здесь на
output. И лишь в одном случае, когда у нас на input A и на input транзистора B напряжение не подаётся (0) —
будет false.


                                        Операция XOR или exclusive or (исключающее или)
Работает по следующему принципу. Она возвращает true только в тех случаях, где у
нас один true. С помощью ложных или правдивых фраз это довольно-таки сложно
выразить. Здесь подойдёт больше аналогия про бизнес-ланч


                    Это похоже на то, когда на бизнес ланче есть выбор
                    салат + горячие или суп + горячие
                    НО нет опции салат + суп
                    Должно быть что то одно

                        INPUT   INPUT2  OUTPUT
                        FALSE   FALSE   FALSE
                        TRUE    FALSE   TRUE
                        FALSE   TRUE    TRUE
                        TRUE    TRUE    FALSE

Но как нам вернуть в последнем значении false? Для этого мы немножко придумаем более хитрую схему. К нашему
оператору OR мы присоединим последовательность AND и NOT. Обратите внимание, когда нам надо подать два
true, нам надо вернуть false. Когда мы подаём два true и AND возвращает тоже true. А NOT превращает это
false. То есть здесь у нас будет 0. Таким образом, подавая два true на вход, мы можем получить false на
выход.

Что насчёт других комбинаций? Когда у нас здесь true и false подаётся. Или false и true подаётся. Или false
и false подаётся. У нас здесь AND возвращает в любом случае 0. Всегда. А операция NOT превратит их в
единички (1).

Благодаря четырём гейтам мы можем реализовать функцию XOR. Она нам пригодится в будущем, в том числе для
сложения чисел. Поэтому мы её изучаем. Она очень важна.

Теперь мы не будем задумываться в будущем, как работают те или иные гейты. Или как работает транзистор
внутри этих гейтов. Или как течёт ток внутри этих транзисторов. Или как работают квантовые механизмы
внутри полупроводников этих транзисторов. Решив одну проблему, мы можем использовать её решение для
решения других проблем. Это называется использованием уровня абстракции.